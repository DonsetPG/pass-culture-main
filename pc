#!/bin/bash

set -o nounset

PRG="$BASH_SOURCE"

while [ -h "$PRG" ] ; do
	ls=`ls -ld "$PRG"`
	link=`expr "$ls" : '.*-> \(.*\)$'`
	if expr "$link" : '/.*' > /dev/null; then
		PRG="$link"
	else
		PRG=`dirname "$PRG"`"/$link"
	fi
done

ROOT_PATH=$(dirname "$PRG")

function confirm {
 read -p "$1 (y/n) : " -n 1 -r
 echo
 if [[ ! $REPLY =~ ^[Yy]$ ]]
 then
   exit
 fi
}

function ensure_remote {
  if [[ "$ENV" == "local" ]]; then
    echo "$1"
    exit 3
  fi
}

if [[ $# -gt 2 ]] && [[ "$1" == "-e" ]]; then
  ENV=$2
  shift 2
else
  ENV="local"
fi

if [[ "$1" == "" ]]; then
  echo "Usage : pc <command> [arguments]"
  exit
fi

CMD="$1"
shift

if [[ "$ENV" == "production" ]]; then
  confirm "Are you sure you want to run $CMD in production ?"
fi

if [[ "$CMD" == "alembic" ]]; then
  RUN='docker exec `docker ps | grep flask | cut -d" " -f 1` bash -c "cd /opt/services/flaskapp/src && alembic '"$*"'"'
elif [[ "$CMD" == "build-pg" ]]; then
	if [[ "$ENV" == "production" ]]; then
		RUN='cd $ROOT_PATH/webapp && source ./env_file && yarn pgbuild-prod'
	else [[ "$ENV" == "staging" ]]; then
		RUN='cd $ROOT_PATH/webapp && source ./env_file && yarn pgbuild'
	fi	 
elif [[ "$CMD" == "bash" ]]; then
	RUN='docker exec -it `docker ps | grep flask | cut -d" " -f 1` bash'
elif [[ "$CMD" == "deploy-backend" ]]; then
  ensure_remote "Deploy backend cannot be run on the local environment. Use (for example) \"pc -e staging deploy-backend\"."
  RUN='cd $ROOT_PATH && ./pc reset-git'
elif [[ "$CMD" == "deploy-frontend" ]]; then
  ensure_remote "Deploy fontend cannot be run on the local environment. Use (for example) \"pc -e staging deploy-frontend\"."

  cd $ROOT_PATH/webapp

  NODE_ENV="$ENV" yarn build || exit

  # Add generic redirects for netlify which work with everything routed to
  # index.htm and relative paths to main.js and main.css for phonegap
  JSPATH=`grep -o '\./static/js/main\.[a-z0-9]*\.js' build/index.html`
  JSHASH=`echo "$JSPATH" | cut -d\. -f 3`
  CSSPATH=`grep -o '\./static/css/main\.[a-z0-9]*\.css' build/index.html`
  CSSHASH=`echo "$CSSPATH" | cut -d\. -f 3`

  echo "/:path1/main.$JSHASH.js /$JSPATH 301" > build/_redirects
  echo "/:path1/:path2/main.$JSHASH.js /$JSPATH 301" >> build/_redirects
  echo "/:path1/:path2/:path3/main.$JSHASH.js /$JSPATH 301" >> build/_redirects
  echo "/:path1/:path2/:path3/:path4/main.$JSHASH.js /$JSPATH 301" >> build/_redirects
  echo "/:path1/:path2/:path3/:path4/:path5/main.$JSHASH.js /$JSPATH 301" >> build/_redirects
  echo "/:path1/:path2/:path3/:path4/:path5/:path6/main.$JSHASH.js /$JSPATH 301" >> build/_redirects

  echo "/:path1/main.$CSSHASH.css /$CSSPATH 301" >> build/_redirects
  echo "/:path1/:path2/main.$CSSHASH.css /$CSSPATH 301" >> build/_redirects
  echo "/:path1/:path2/:path3/main.$CSSHASH.css /$CSSPATH 301" >> build/_redirects
  echo "/:path1/:path2/:path3/:path4/main.$CSSHASH.css /$CSSPATH 301" >> build/_redirects
  echo "/:path1/:path2/:path3/:path4/:path5/main.$CSSHASH.css /$CSSPATH 301" >> build/_redirects
  echo "/:path1/:path2/:path3/:path4/:path5/:path6/main.$CSSHASH.css /$CSSPATH 301" >> build/_redirects

  cat "public/_redirects" >> build/_redirects

  netlify deploy -e "$ENV"

  delivery_date=`( date --version 2>/dev/null | grep -q GNU\  && date +'%F_%H-%M-%S%N' ) || ( which gdate &>/dev/null && gdate +'%F_%H-%M-%S%N' ) || ( which python &> /dev/null && python -c 'import datetime; print datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S%f")' ) || ( date +'%F_%H-%M-%S' )`
  delivery_date=${delivery_date:0:21}
  tagname="deployed-$ENV-$delivery_date"
  git tag $tagname
  git push origin $tagname

  exit
elif [[ "$CMD" == "dump-db" ]]; then
  RUN='mkdir -p "$ROOT_PATH/db_dumps";
       docker exec `docker ps | grep postgres | cut -d" " -f 1` pg_dump -d pass_culture -U pass_culture -F c > "$ROOT_PATH"/db_dumps/`date +%Y%m%d_%H%M%S`.pgdump'
elif [[ "$CMD" == "ftp_mirrors" ]]; then
  mkdir -p "$ROOT_PATH/api/ftp_mirrors"
  sshfs -o allow_other,idmap=user deploy@api.passculture-staging.beta.gouv.fr:/home/deploy/pass-culture-main/api/ftp_mirrors "$ROOT_PATH/api/ftp_mirrors"\
    && echo "FTP mirrors mounted, please restart flask docker container"
  exit
elif [[ "$CMD" == "grep" ]]; then
  RUN='grep --exclude-dir ftp_mirrors --exclude-dir node_modules --exclude-dir build --exclude-dir postgres_data --exclude-dir .hypothesis -r "'"$*"'" .'
elif [[ "$CMD" == "install" ]]; then
  RUN='yarn global add concurrently;
       git submodule init;
       git submodule update;
       git submodule foreach git checkout origin master;
			 ./pc symlink;
       cd $ROOT_PATH/webapp && yarn'
elif [[ "$CMD" == "psql" ]]; then
  COLUMNS=${COLUMNS:-''};
  RUN='docker exec -it `docker ps | grep postgres | cut -d" " -f 1` bash -c "COLUMNS=\"'$COLUMNS'\" psql -U pass_culture pass_culture $*"'
elif [[ "$CMD" == "python" ]]; then
  RUN='docker exec -it `docker ps | grep flask | cut -d" " -f 1` bash -c "cd /opt/services/flaskapp/src/ && PYTHONPATH=. python -i scripts/interact.py '"$CMD $*"'"'
elif [[ "$CMD" == "rebuild-backend" ]]; then
  RUN='docker-compose build --no-cache;
			 sudo rm -rf $ROOT_PATH/api/static/object_store_data;
       sudo rm -rf $ROOT_PATH/api/postgres_data'
elif [[ "$CMD" == "rebuild-frontend" ]]; then
	RUN='cd $ROOT_PATH/webapp && npm run build'
elif [[ "$CMD" == "reset-git" ]]; then
	RUN='cd $ROOT_PATH && git submodule foreach bash -c "git fetch && git reset --hard && git checkout origin/master && git reset --hard"'
elif [[ "$CMD" == "restart-backend" ]]; then
  RUN='sudo rm -rf $ROOT_PATH/api/static/object_store_data;
       sudo rm -rf $ROOT_PATH/api/postgres_data;
       docker-compose up --force-recreate'
elif [[ "$CMD" == "reset-backend" ]]; then
	RUN='cd "$ROOT_PATH";
			 ./pc reset-all-db;
			 ./pc update_providables -p SpreadsheetExpVenues;
			 ./pc update_providables -p SpreadsheetExpOffers;
			 ./pc init;'
elif [[ "$CMD" == "reset-all-db" ]]; then
  RUN='docker exec -it `docker ps | grep flask | cut -d" " -f 1` bash -c "rm -rf /opt/services/flaskapp/src/static/object_store_data/*";
       docker exec -it `docker ps | grep postgres | cut -d" " -f 1` bash -c "psql -U pass_culture pass_culture -c \"TRUNCATE \\\"user\\\",booking,offerer,event,mediation,offer,provider,recommendation,user_offerer,venue,thing RESTART IDENTITY CASCADE;\""'
elif [[ "$CMD" == "reset-reco-db" ]]; then
  RUN='docker exec -it `docker ps | grep postgres | cut -d" " -f 1` bash -c "psql -U pass_culture pass_culture -c \"TRUNCATE booking,recommendation,recommendation_offer,recommendation_booking RESTART IDENTITY;\""'
elif [[ "$CMD" == "restore-db" ]]; then
  if [[ $# == 0 ]]; then
    echo "Usage : pc restore-db <backup_file> [arguments]"
    exit
  fi
  backup_file="$1"
  RUN='cat "'$backup_file'" | docker exec -i `docker ps | grep postgres | cut -d' ' -f 1` pg_restore -d pass_culture -U pass_culture -c'
elif [[ "$CMD" == "set-backend" ]]; then
	RUN='cd "$ROOT_PATH";
			 ./pc update-mocks;
			 ./pc update_providables -m -p SpreadsheetExpVenues;
			 ./pc update_providables -m -p SpreadsheetExpOffers;
			 ./pc init;'
elif [[ "$CMD" == "ssh" ]]; then
	if [[ "$ENV" == "production" ]]; then
		ssh deploy@api.passculture.beta.gouv.fr
	elif [[ "$ENV" == "staging" ]]; then
		ssh deploy@api.passculture-staging.beta.gouv.fr
	fi
elif [[ "$CMD" == "start-backend" ]]; then
  RUN='docker-compose up'
elif [[ "$CMD" == "start-browser" ]]; then
  RUN='cd $ROOT_PATH/webapp && yarn start'
elif [[ "$CMD" == "start-ios" ]]; then
	RUN='open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app'
elif [[ "$CMD" == "symlink" ]]; then
  RUN='cd /usr/local/bin && ln -sf '"$(pwd)"'/pc pc && chmod +x pc && chmod +x '"$(pwd)"'/pc'
elif [[ "$CMD" == "test-backend" ]]; then
  if [[ $# == 0 ]]; then
    confirm "Warning: your database will be wiped. Is this OK ?"
     "$ROOT_PATH"/pc -e $ENV reset-all-db
     RUN='docker exec `docker ps | grep flask | cut -d" " -f 1` bash -c "cd /opt/services/flaskapp/src/ && rm -rf static/object_store_data/thumbs/* && PYTHONPATH=. pytest tests/*"'
  else
     RUN='docker exec `docker ps | grep flask | cut -d" " -f 1` bash -c "cd /opt/services/flaskapp/src/ && rm -rf static/object_store_data/thumbs/* && PYTHONPATH=. pytest '"$*"'"'
  fi
elif [[ "$CMD" == "testcafe" ]]; then
  RUN='cd "$ROOT_PATH"/webapp && ./scripts/pc.js testcafe '"$*"
elif [[ "$CMD" == "update-mocks" ]]; then
  RUN='cd "$ROOT_PATH";
       cd api/mock/spreadsheet_exp;
       wget -O Lieux.csv "https://docs.google.com/spreadsheets/d/1Lj53_cgWDyQ1BqUeVtq059nXxOULL28mDmm_3p2ldpo/gviz/tq?tqx=out:csv&sheet=Lieux";
       wget -O Evenements.csv "https://docs.google.com/spreadsheets/d/1Lj53_cgWDyQ1BqUeVtq059nXxOULL28mDmm_3p2ldpo/gviz/tq?tqx=out:csv&sheet=Evenements"
      '
else
  RUN='docker exec `docker ps | grep flask | cut -d" " -f 1` bash -c "cd /opt/services/flaskapp/src/ && PYTHONPATH=. python scripts/pc.py '"$CMD $*"'"'
fi

if [[ "$ENV" == "production" ]]; then
  echo "$RUN" | ssh deploy@api.passculture.beta.gouv.fr bash
elif [[ "$ENV" == "staging" ]]; then
  echo "$RUN" | ssh deploy@api.passculture-staging.beta.gouv.fr bash
else
  echo $RUN
  eval $RUN
fi
